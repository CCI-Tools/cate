define(["./when-54c2dc71","./Check-6c0211bc","./Math-fc8cecf5","./Cartesian2-bddc1162","./Transforms-ec27f304","./RuntimeError-2109023a","./WebGLConstants-76bb35d1","./ComponentDatatype-6d99a1ee","./GeometryAttribute-44fb48f1","./GeometryAttributes-4fcfcf40","./IndexDatatype-53503fee","./IntersectionTests-2626c9e9","./Plane-231f1723","./ArcType-dc1c5aee","./EllipsoidRhumbLine-c704bf4c","./EllipsoidGeodesic-30fae80b","./PolylinePipeline-fba5024c","./Color-8abf6fcd"],function(S,e,I,R,O,o,r,M,U,N,F,t,a,H,l,i,W,Y){"use strict";function f(e){var o=(e=S.defaultValue(e,S.defaultValue.EMPTY_OBJECT)).positions,r=e.colors,t=S.defaultValue(e.colorsPerVertex,!1);this._positions=o,this._colors=r,this._colorsPerVertex=t,this._arcType=S.defaultValue(e.arcType,H.ArcType.GEODESIC),this._granularity=S.defaultValue(e.granularity,I.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=S.defaultValue(e.ellipsoid,R.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry";var a=1+o.length*R.Cartesian3.packedLength;a+=S.defined(r)?1+r.length*Y.Color.packedLength:1,this.packedLength=a+R.Ellipsoid.packedLength+3}f.pack=function(e,o,r){var t;r=S.defaultValue(r,0);var a=e._positions,l=a.length;for(o[r++]=l,t=0;t<l;++t,r+=R.Cartesian3.packedLength)R.Cartesian3.pack(a[t],o,r);var i=e._colors,l=S.defined(i)?i.length:0;for(o[r++]=l,t=0;t<l;++t,r+=Y.Color.packedLength)Y.Color.pack(i[t],o,r);return R.Ellipsoid.pack(e._ellipsoid,o,r),r+=R.Ellipsoid.packedLength,o[r++]=e._colorsPerVertex?1:0,o[r++]=e._arcType,o[r]=e._granularity,o},f.unpack=function(e,o,r){o=S.defaultValue(o,0);for(var t=e[o++],a=new Array(t),l=0;l<t;++l,o+=R.Cartesian3.packedLength)a[l]=R.Cartesian3.unpack(e,o);var i=0<(t=e[o++])?new Array(t):void 0;for(l=0;l<t;++l,o+=Y.Color.packedLength)i[l]=Y.Color.unpack(e,o);var n=R.Ellipsoid.unpack(e,o);o+=R.Ellipsoid.packedLength;var s=1===e[o++],p=e[o++],c=e[o];return S.defined(r)?(r._positions=a,r._colors=i,r._ellipsoid=n,r._colorsPerVertex=s,r._arcType=p,r._granularity=c,r):new f({positions:a,colors:i,ellipsoid:n,colorsPerVertex:s,arcType:p,granularity:c})};var q=new Array(2),z=new Array(2),J={positions:q,height:z,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return f.createGeometry=function(e){var o,r,t,a=e._positions,l=e._colors,i=e._colorsPerVertex,n=e._arcType,s=e._granularity,p=e._ellipsoid,c=I.CesiumMath.chordLength(s,p.maximumRadius),f=S.defined(l)&&!i,d=a.length,y=0;if(n===H.ArcType.GEODESIC||n===H.ArcType.RHUMB){var u,h,C=n===H.ArcType.GEODESIC?(u=I.CesiumMath.chordLength(s,p.maximumRadius),h=W.PolylinePipeline.numberOfPoints,W.PolylinePipeline.generateArc):(u=s,h=W.PolylinePipeline.numberOfPointsRhumbLine,W.PolylinePipeline.generateRhumbArc),T=W.PolylinePipeline.extractHeights(a,p),g=J;if(n===H.ArcType.GEODESIC?g.minDistance=c:g.granularity=s,g.ellipsoid=p,f){for(var m=0,b=0;b<d-1;b++)m+=h(a[b],a[b+1],u)+1;o=new Float64Array(3*m),t=new Uint8Array(4*m),g.positions=q,g.height=z;var v=0;for(b=0;b<d-1;++b){q[0]=a[b],q[1]=a[b+1],z[0]=T[b],z[1]=T[b+1];var P=C(g);if(S.defined(l))for(var _=P.length/3,B=l[b],A=0;A<_;++A)t[v++]=Y.Color.floatToByte(B.red),t[v++]=Y.Color.floatToByte(B.green),t[v++]=Y.Color.floatToByte(B.blue),t[v++]=Y.Color.floatToByte(B.alpha);o.set(P,y),y+=P.length}}else if(g.positions=a,g.height=T,o=new Float64Array(C(g)),S.defined(l)){for(t=new Uint8Array(o.length/3*4),b=0;b<d-1;++b)y=function(e,o,r,t,a,l,i){var n=W.PolylinePipeline.numberOfPoints(e,o,a),s=r.red,p=r.green,c=r.blue,f=r.alpha,d=t.red,y=t.green,u=t.blue,h=t.alpha;if(Y.Color.equals(r,t)){for(v=0;v<n;v++)l[i++]=Y.Color.floatToByte(s),l[i++]=Y.Color.floatToByte(p),l[i++]=Y.Color.floatToByte(c),l[i++]=Y.Color.floatToByte(f);return i}for(var C=(d-s)/n,T=(y-p)/n,g=(u-c)/n,m=(h-f)/n,b=i,v=0;v<n;v++)l[b++]=Y.Color.floatToByte(s+v*C),l[b++]=Y.Color.floatToByte(p+v*T),l[b++]=Y.Color.floatToByte(c+v*g),l[b++]=Y.Color.floatToByte(f+v*m);return b}(a[b],a[b+1],l[b],l[b+1],c,t,y);var E=l[d-1];t[y++]=Y.Color.floatToByte(E.red),t[y++]=Y.Color.floatToByte(E.green),t[y++]=Y.Color.floatToByte(E.blue),t[y++]=Y.Color.floatToByte(E.alpha)}}else{r=f?2*d-2:d,o=new Float64Array(3*r),t=S.defined(l)?new Uint8Array(4*r):void 0;var k=0,G=0;for(b=0;b<d;++b){var w=a[b];if(f&&0<b&&(R.Cartesian3.pack(w,o,k),k+=3,B=l[b-1],t[G++]=Y.Color.floatToByte(B.red),t[G++]=Y.Color.floatToByte(B.green),t[G++]=Y.Color.floatToByte(B.blue),t[G++]=Y.Color.floatToByte(B.alpha)),f&&b===d-1)break;R.Cartesian3.pack(w,o,k),k+=3,S.defined(l)&&(B=l[b],t[G++]=Y.Color.floatToByte(B.red),t[G++]=Y.Color.floatToByte(B.green),t[G++]=Y.Color.floatToByte(B.blue),t[G++]=Y.Color.floatToByte(B.alpha))}}var D=new N.GeometryAttributes;D.position=new U.GeometryAttribute({componentDatatype:M.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:o}),S.defined(l)&&(D.color=new U.GeometryAttribute({componentDatatype:M.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:t,normalize:!0}));var L=2*((r=o.length/3)-1),V=F.IndexDatatype.createTypedArray(r,L),x=0;for(b=0;b<r-1;++b)V[x++]=b,V[x++]=b+1;return new U.Geometry({attributes:D,indices:V,primitiveType:U.PrimitiveType.LINES,boundingSphere:O.BoundingSphere.fromPoints(a)})},function(e,o){return S.defined(o)&&(e=f.unpack(e,o)),e._ellipsoid=R.Ellipsoid.clone(e._ellipsoid),f.createGeometry(e)}});
