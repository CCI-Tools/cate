name: Deploy on Release

on:
  workflow_dispatch:
  release:
    types:
      - created
  push:
    branches:
      - master

jobs:
  build-docker:
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - uses: actions/checkout@v2
      # Determine release name (e.g. v1.0.0, master)
      - name: Set Release Name
        id: releasename
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/*/}
      # Setup docker build environment
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # Login to docker repo provider
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_DOCKER_REPO_USERNAME }}
          password: ${{ secrets.QUAY_DOCKER_REPO_PASSWORD }}
      # Build latest if release name is master and push to docker repo
      - name: Setup Build and push
        id: docker_build
        if: ${{ steps.releasename.outputs.VERSION }} == 'master'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: quay.io/ccitools/cate:latest
      # Build release
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: quay.io/ccitools/cate:${{ steps.releasename.outputs.VERSION }}
  trigger-deployment:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - uses: actions/checkout@v2
      - name: Set Release Name
        id: releasename
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/*/}
      - name: Clone k8s-configs
        run: |
          git clone https://bcdev:${{ secrets.CATE_GITHUB_K8S_CONFIGS_PAT }}@github.com/bcdev/k8s-configs
          cd k8s-configs

          git config --global user.email "bcdev@brockmann-consult.de"
          git config --global user.name "BC Dev"
      - name: trigger deploy dev
        run: |
          echo "##############################################"
          echo "Deploy dev version ${{ steps.releasename.outputs.VERSION }}"
          echo "##############################################"
          cd k8s-configs
          sed -i -e 's/cate-version [a-z0-9\.]*$/cate-version ${{ steps.releasename.outputs.VERSION }}/g' ke/helm/xcube-hub/values-dev.yaml
          sed -i -e 's/cate-version [a-z0-9\.]*$/cate-version ${{ steps.releasename.outputs.VERSION }}/g' ke/helm/xcube-hub/values-stage.yaml
          git commit -a -m "Updated cate dev version to ${{ steps.releasename.outputs.VERSION }}"
      - name: trigger deploy dev
        if: "!contains(${{ steps.releasename.outputs.VERSION }}, 'dev')"
        run: |
          echo "##############################################"
          echo "Deploy production version ${{ steps.releasename.outputs.VERSION }}"
          echo "##############################################"
          cd k8s-configs
          sed -i -e 's/cate-version [a-z0-9\.]*$/cate-version ${{ steps.releasename.outputs.VERSION }}/g' ke/helm/xcube-hub/values-prod.yaml
          git commit -a -m "Updated cate production version to ${{ steps.releasename.outputs.VERSION }}"
      - name: trigger deploy latest
        if: ${{ steps.releasename.outputs.VERSION }} == 'master'
        run: |
          echo "##############################################"
          echo "Deploy production version ${{ steps.releasename.outputs.VERSION }}"
          echo "##############################################"
          cd k8s-configs
          sed -i -e 's/cate-version [a-z0-9\.]*$/cate-version latest/g' ke/helm/xcube-hub/values-dev.yaml
          git commit -a -m "Updated cate latest version to ${{ steps.releasename.outputs.VERSION }}"
      - name: Push to k8s-configs
        run: |
          cd k8s-configs
          git push origin main
